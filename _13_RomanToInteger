class Solution {
public:
int romanToInt(string s) {
    int res = 0, i = 0;
    while (i < s.size()) {
        res += digToInt(s, &i);
    }
    
    return res;
}
int digToInt(string s, int* i) {
    int res = 0, mul = 0;
    char n1 = '\0', n2 = '\0', n3 = '\0';
    char n[9] = {'I','V','X','L','C','D', 'M', 'N', 'N'};
    
    for (mul = 3; mul >= 0; --mul) {
        n1 = n[mul * 2];
        n2 = n[mul * 2 + 1];
        n3 = n[mul * 2 + 2];
        if (s[*i] == n1 || s[*i] == n2 || s[*i] == n3) break;
    }
    mul = pow(10, mul);
    if (s[*i] == n1 && s[*i + 1] == n3) {
        *i += 2;
        res += 9 * mul;
        if (*i == s.size()) return res;
    }
    if (s[*i] == n1 && s[*i + 1] == n2) {
        *i += 2;
        res += 4 * mul;
        if (*i == s.size()) return res;
    }
    if (s[*i] == n2) {
        (*i)++;
        res += 5 * mul;
        if (*i == s.size()) return res;
    }
    while (s[*i] == n1) {
        (*i)++;
        res += 1 * mul;
        if (*i == s.size()) return res;
    }
    return res;
}
};
